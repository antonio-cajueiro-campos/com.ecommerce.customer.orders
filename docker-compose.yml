version: '3.8'

services:
  mongo:
    image: mongo
    container_name: Ecommerce.Mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=bdcd0225b7b045e8a94b1497ed686820
    volumes:
      - ./mongo:/data/db
    networks:
      - ecommerce

  prometheus:
    image: prom/prometheus:latest
    container_name: Ecommerce.Prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - ecommerce

  grafana:
    image: grafana/grafana:latest
    container_name: Ecommerce.Grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - "3000:3000"
    networks:
      - ecommerce

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: Ecommerce.Zookeeper
    networks:
      - ecommerce
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: Ecommerce.Kafka
    networks:
      - ecommerce
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: Ecommerce.KafkaDrop
    networks:
      - ecommerce
    depends_on:
      - kafka
    ports:
      - "19000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:29092

  customer-orders-consumer:
    build: "./customer.orders.consumer/"
    container_name: Ecommerce.Customer.Orders.Consumer
    restart: always
    ports:
      - "7662:7662"
    depends_on:
      - mongo
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - ecommerce

  customer-orders-producer:
    build: "./customer.orders.producer/"
    container_name: Ecommerce.Customer.Orders.Producer
    restart: always
    ports:
      - "7661:7661"
    depends_on:
      - mongo
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - ecommerce

networks:
  ecommerce:
    driver: bridge